#+TITLE: dev-notes
* git
** Install
*** Fedora
sudo yum install git
git config --global user.name "Jack Gill"
git config --global user.email jack@jackmgill.com
*** Ubuntu
sudo apt-get instlal g
*** Windows
Download windows installer:
http://git-scm.com/download
** push changes to github:
git push github master
** update local repo from github:
git pull github master
** add remote
git remote add github git@github.com:jackgill/Project-Euclid.git
* Google Apps
champa@jackmgill.com
champa*rules
* Ruby
** Install
*** Linux
use the bash snippet on the rvm home page:
http://beginrescueend.com/
install all of the rvm dependencies (specified in the shell output from the rvm installer)
rvm install 1.9.2
rvm use 1.9.2 --default
*** Windows
use the Rails Installer:
http://railsinstaller.org/
* sqlite
** to create a new database
sqlite3 foo.db
** to create a new table
create table name(x integer primary key, y text, z double, a date)
** list tables
sqlite3 db\development.sqlite3;
SELECT name FROM sqlite_master WHERE type='table' ORDER BY name;
SELECT sql FROM sqlite_master WHERE type = 'table' AND tbl_name = 'table_name';
* postgres
** Install
*** Fedora
sudo yum install postgresql-server postgres-devel
su root
mkdir /usr/local/pgsql/data
chown postgres /usr/local/pgsql/data
su - postgres
initdb -D /usr/local/pgsql/data
pg_ctl start -D /usr/local/pgsql/data
createuser -P (create user euclid, password foo)
createuser -P (create user jack, password foo)
createdb euclid_development
** to start the database server: 
- postgres -D (path to data directory)
*** Windows
- C:\Users\Jack\PostgreSQL\9.1\bin\postgres.exe -D C:\Users\Jack\PostgreSQL\9.1\data
*** Ubuntu
- postgres -D ~/postgres_data/
*** Fedora
su postgres -c "postgres -D /usr/local/pgsql/data &"
(password is postgres)
*** Fedora (laptop)
postgres -D ~/postgres_data &
** connect to the database server: 
psql -d (database name) -U (user name)
psql -d euclid_development -U euclid
(password for user euclid is foo)
special bonus command:
psql -d euclid_development -U euclid -c "select * from Users;"
** set up new PG db
initially, connect as user 'postgres' and create a new role, a new database, and set privleges:
 psql -U postgres
 create user jack password 'password' (NOTE: user name will be lower-cased)
 create database (database name);
 grant all privileges on (database name) to (user name);
** to get the postgres db adapter for ruby:
sudo gem install pg
** restart postgres server process
pg_ctl restart -D C:\Users\Jack\PostgreSQL\9.1\data
pg_ctl restart -D /usr/local/pgsql/data/
** show columns
show columns \d (table name)
* emacs
use nxhtml for syntax highlighting erb files
use M-x customize-group RET mumamo RET to change the background color
* Product Development Roadmap
** Name, domain registration
** Skin
** UI testing w/ family/friends
* Heroku
** Install
gem install heroku
git remote add heroku git@heroku.com:electric-lightning-9621.git
heroku keys:add
** create new heroku app
heroku create --stack cedar
** deploy new version to heroku
git push heroku master
** run database migration on heroku db
heroku run rake db:migrate
** open site on heroku
heroku open
http://electric-lightning-9621.heroku.com/
* Rails
** Install
*** Linux
gem install rails
*** Windows
Use the Rails Installer:
http://railsinstaller.org/
** Initialize new project
bundle install
rake db:seed
** generate a database migration to add a column to an existing table
rails generate migration AddColumnToTable column:type
rails generate migration AddIsAdminToUsers is_admin:boolean
** generate a controller
rails generate controller account login logout
** Response.Write from controller
render :text => "hello"
** scaffolding
rails generate scaffold user first_name:string last_name:string email:string login:string hashed_password:string salt:string
rails generate scaffold building name:string address:text
rails generate scaffold spot building_id:integer number:integer floor:integer owner_id:integer
rails generate scaffold request requester_id:integer start_date:date end_date:date bid_price:decimal
rails generate scaffold transaction spot_id:integer buyer_id:integer seller_id:integer start_date:date end_date:date price:decimal
rails generate scaffold availability listing_id:integer building_id:integer start_date:date end_date:date
rails generate mailer EventNotifier new_request new_listing listing_fulfilled request_fulfilled building_request transaction_reminder
** testing
*** to run all tests
rake test
*** to run 1 test
ruby -Itest test/functional/users_controller_test.rb
*** test database
rake db:test:prepare - wipe the test db and load the schema
the tests ignore seed data and only look at fixtures
rake db:fixtures:load loads the fixture data into the dev database, which is *not* what we want
to reference a foreign key in a fixture, you should use the fixture NAME, not the ID
** send notification email
EventNotifier.new_request(Request.first, [ 'jack@jackmgill.com' ]).deliver
** requiring files
if you define a class called NewRequestEvent, you had damn well better put it in a file called new_request_event.rb, or rails will not load the class, even if the directory is in the autoload path
* Business
** General musings
What is a business?
An LLC.
A memorandum of understanding?
It has:
- a domain
- email
- a mailing address, usually a PO Box
- a web site
- a phone number?
When you start a small business, the LLC is a legal shim that stands between you and liability. 
The various means to contacts a business - email, phone, snail mail - all fall through to the personal
equivalents for the founders. 
Likewise, the income and taxes fall through to the founders.

So when you start an LLC, you're basically creating a thin layer between your person and the rest of 
the world.

Need to do some cost projections based on various hosting scenarios.
Need to research these hosting providers in depth: Heroku, Engine Yard, EC2. (others: Rackspace, Linode) 
Need to write a position paper on PaaS vs IaaS.
Need to do some revenue projections based on usage volume, and our cut.

cost project + revenue = rudimentary business model?
** Purpose
A lot of tech startups are criticized for being "products, not companies". A company is something that exists across multiple product lines and generations of leadership. Do we want a company? Or are we content with just a product? Either would be fine, and really there's very little difference between them in the early stages. But it seems like a company might be a good vehicle for our longer-term financial and social ambitions. A company would need a statement of purpose such as "applying a lean products methodology to interesting and lucrative problems." The various products offered by this company would offer us a revenue stream which would allow us to lead a somewhat more comfortable lifestyle than would otherwise be possible.
* Brainstorming
** counter offers:
field for transaction owner
two fields for each party assenting to the transaction
facilitate counter offers by resetting "owner" field
transaction is complete when both parties assent
TODO: mutable or immutable transactions?
** partial availability
- availability by the day, the day is defined as 10am - 10am, w/ a button to request late check in / check out
- listing partial availability: introduce a "day" resource, each listing has multiple days.
- alternatively, stick w/ single listings, and reference a "taken" table -- everything runs off timestamps

taken needs  foreign key to listings

# create tables
create table listings(id integer primary key, start_date date, end_date date);
create table taken(id integer primary key, start_date date, end_date date, foreign key(id) references listings(id));

# insert some dummy data
insert into listings (start_date, end_date) values('2012-01-01', '2012-01-02');
insert into listings (start_date, end_date) values('2012-01-01', '2012-01-12');
insert into taken (start_date, end_date, listing_id) values('2012-01-03', '2012-01-08', 2);

query (listings + taken) for available time slots
two step query:
retrieve all listings meeting query criteria
for each listing, retrieve taken entries using foreign key
(this will be SLOW)
what to return?
pseudo-listings?

business requirement: 
users can create listings for arbitrary time periods
other users can taken arbitrary subsets of these listings
but me must still be able to efficiently query for available listings



------------------
chunks
day-sized chunks
each chunk has a listing id
this makes it easy to reconstitute a listing from its chunks

wait a minute
what about a table called days
each day w/ a reference to a listing
and/or a taken entry

calendar-per-building?
each day entry would need a list of listings and a list of taken
no...
you would pull a listing id off a day when it's taken

----------------------
currently "Taken" is a boolean property of listing
should it instead be a date range
should we introduce additional "available" date ranges?
should a listing advertise when it has availability?
zero more availability ranges
(perhaps we should be thinking in terms of storing "Taken", since after all we want to query on availability)
multiple rows per listing w/ different availabilities?
or just a separate availability table, w/ a foreign key to listings?
when taking availabily, computer appropriate alterations to availability table
need a separate "rentals" table? or is "transactions" covering that?

so on insert, fragment availability table? seems bogus.

essentially, the problem is how to represent time intervals, sub-intervals, and efficient querying on the difference between the two.

the key to efficiency seems to be pre-computing the desired quantity and representing it compactly.

the desired quantity is availability, not "taken-ness", so that's what we should be pre-computing and storing. the question is the most efficient format for storing availability? From a query perspective, we're doing fine with time spans

I'm thinking of an interval as being defined by its endpoints, but postgres seems to think of it as an offset and a length

I think I've got the most efficient query syntax possible

so the key this is the separation of a listing and availabilty
essentially, transforming "taken" from a bool to a set of ranges (and inverting that set of ranges)
the trick is to do the math on insert, which is expected to take a bit, and not on query, which is expected to be fast.

ok, so on creation of a listing, an availability entry is created, with date endpoints corresponding to the listing's endpoints.
when someone wants to "take" part of a listing, the initial availability entry is split into two new availability entries, with a gap corresponding to what's been "taken"
(each "take" action is limited to at most 1 deletion and 2 inserts)
querying of the availability table is still efficient since it doesn't require any addition calculations at query time.

now, how to do this w/ the rails ORM is rather a differ matter. presumably, create an Availability object. that should be that hard, actually.

SOLUTION:
so I need to generate a rails model for availability. it will have a foreign key to the listings table, a start date, and an end date. The spots search will target this table, doing a join into listings to get the display info.

On creation of a new listing, create a new availability entry with the same endpoints.

On creation of a transaction, delete the corresponding availability entry (or mark it as defunct?), and create two new availability objects corresponding to the remaining portions of the original availabilty object. 

oh god, gonna need update logic as well

** user preferences
user preference table?
store each prefence in a db table?
or just use a json / xml string?
relational database will make running reports easier

should there be a separate user preference table? or just add to the current users table? separate notification preferences table?

using the same table is simpler and faster for small amounts of data. using a separate table facilitates lazy-loading, which may be more efficient for large amounts of data.

general opinion seems to favor normalization, so a separate preferences table

THE DECISION:

we're doing a separate table (yay normalization!)
each preference will be a column (yay efficient reports!)
initial table will only contain default_building_id, notification prefs to come

** entitlements system
need per-controller implementations of require_owner_or_admin?
what about the model supplying a definition of is_owner, allowing for multiple owners?
buildings controller should require admin for all actions
the problem being that each table has a different column name for the owner/owners
need to protect edit, update, delete (and occasionally show)
need a protect_resource helper for this
possibly accepting an attribute name or list of attribute names
maybe not a filter, but an ordinary method accepting a resource object, and a list of column names?
or perhaps filter-per-controller, calling this method
** notifications system
need a class to encapsulate notifications
a model, presumably
which will consult user notification preferences
need an idea of an event?
an event is the trigger for a notification
users may subscribe/unsubscribe to notifications related to a certain event
API:
create_event(event_type, parameters (building_id, etc))
may be an event object?
Event.new
use inheritance?
NewRequestEvent < Event
do we really want to pull the event name into a class hierarchy?
it would allow for custom parameters

event defines get_users method?

def send_notification(event)
  users = UserPreferences.get_subscribers(event)
  for user in users
    Notifier.notify(user, event)
  end
end

The Event class exposes a get_users method, which queries the user preferences table to determine which users have registered to be notified by this event

should there be a separate get_subscribers method in the UserPreferences model? Where exactly do we want to put this configuration?

It seems like perhaps Events should be very simple, suitable for consumption by a variety of other classes

Notifier exposes a single method, notify, which accepts a user and an event. It looks up the appropriate action to invoke based on an internal map, and then invokes that action with the user as a parameter.

mailers are like controllers
templates are like views

Events:
Multiple recipients:
- new request in your building
- new listing in your building
Single recipient:
- reservation reminder (both parties)
- someone rented your spot
- someone fulfilled a request for your spot

Event
NewRequestEvent
- request
NewListingEvent
- listing
ReminderEvent
- transaction
ListingFulfilledEvent
- transaction
RequestFulfilledEvent
- transaction
NewBuildingRequest
- building


So basically, there are three classes in play:
Event - captures all information about an event
UserPreference - knows which users have subscribed to notifications for a given event
Notifier - actually sends notifications (maps events to actions/email templates)

concerns - are we spreading knowledge of events across too many classes?
UserPreference has to map events to subscribers -- should there be a separate class for this?
Notifier has to map events to actions/templates

The alternative is to centralize all this knowledge in the Event class
of course, this means that the event class has to know a lot about the UserPreference and Notifier classes
I kind of like having Event be a dumb struct
and have UserPreference and Notifier be responsible for knowing what to do with this struct
otherwise it seems like Event is at risk of becoming a big terrifiying monolith
on the other hand, if all knowledge was centralized in Event, that might make it easier to add new events
As it is, adding a new event would require touching code in UserPreference and Notifier as well.
Of course, you'd probably have to do that anyways.

Controllers need any easy way to set things in motion -- create an Event and then pass it off to some other entity for processing. An event handler? Event manager? A method on Event itself?
Event.new
Event.trigger / Event.fire / Event.notify
EventManager.notify(event)
Notifier.notify(event)
or just wrap it into the event constructor? nah, probably want to keep that clean in case we find another use for events.
or what about the controller base class? though do we really want to couple notifications with controllers -- probably not. what about triggering custom, one-off events?
I'm kinda liking EventManager. It's generic, and not coupled to any existing component of the application. It's separate from Event, so we preserve the independence of Event.

Ok, EventManager it is.

Draft architecture:
Event - base class which all specific events inherit from. An event is just state, no behavior. Each subclass represents a particular type of event, and includes attributes for any data specific to that event type.

UserPreference - consumes an Event and emits a list of email addresses which have subscribed to that event

Notifier - consumes an Event and an email address, and sends an email notification of the event.

EventManager - consumes an event, queries UserPreference for a list of email addresses, and then passes the event and the list of email addresses to Notifier.

---------------------------------------------------------------

Draft architecture:
Event - base class which all specific events inherit from. An event is just state, no behavior. Each subclass represents a particular type of event, and includes attributes for any data specific to that event type.

UserPreference - consumes an Event and emits a list of email addresses which have subscribed to that event

Notifier - consumes an Event and an email address, and sends an email notification of the event.

EventManager - consumes an event, queries UserPreference for a list of email addresses, and then passes the event and the list of email addresses to Notifier.

-------------------------------------------
UserPreference
- column per optional event
  new request in your building
  new listing in your building

Event
NewRequestEvent
- request
NewListingEvent
- listing
ReminderEvent
- transaction
ListingFulfilledEvent
- transaction
RequestFulfilledEvent
- transaction
NewBuildingRequest
- building



should get_subscribers be in event, not UserPreference?
that would make it easier to add new events
and get rid of the "big switch" code smell in UserPreference
possibly also a send_notification method in event?

def Event
  def get_subscribers()
    return UserPreference.where()
  end

  def send_notification(event)
    users = get_subscribers(event)
    for user in users
      Notifier.notify(user, event)
    end
  end
end

this does eliminate EventManager, which is nice
this seems simpler and more centralized
gets rid of a couple big switches
I say go for it!

* Icebox
** requester needs to confirm fulfillment
** store search terms in session?
** Messaging system
- Analagous to facebook messaging
- Provides an "escape valve" for behaviors that aren't captured in the system
- Another mechanism for notifications
- Insulates user's private emails from one another
** lightning offers
- I have forgotten what this feature is supposed to do.
** private offer facility
** confirmation number
- create a "actions" table
- each row contains an action ID and enough information to debug problems with the action
- the user is given the action ID as a "confirmation number" in case they need customer support
** creation of listing or request via email
- probably don't need this
** calendar to view your spot's availability
- would be a nice UI touch

** per building page - projectchampa.com/spire
** remove password from logs
config.filter_parameters << :password
* Someday/maybe
- upgrade to ruby 1.9.3?
- specify versions of all gems in Gemfile
- need some integration tests covering common user stories
- need to beef up unit/functional test coverage
- check UX for post-user-creation when no page was requested
* Features
** Choose building page
- if the users building isn't available, there should be a form to request it
** Negotiation system
- offer / counter-offer system
- hybrid system allows immediate acceptance of an offer, or counter-offer
- confirmation of rental
** Transaction cancellation mechanism
- need to add notifications when a transaction you're involved in is cancelled
* Misc
** TODO need a way for users to change their email. user prefs page?
- pull preferences into users table?
** TODO need not null and default values for preferences table

** TODO need an admin interface to user preferences
** TODO examine attr_accessible issue in light of github security breach:
https://github.com/rails/rails/issues/5228
** TODO handle case where a user has no spots registered, but attempts to fulfill a request

** TODO you shouldn't be able to fulfill your own request
** TODO need to clear out last page request on logout
** why again does the 'view requests' page not show start and end dates?
** Notifications system
- seeing a weird error where an undeliverable address causes a template parsing warning
- need test for new listing subscribers
- should event notifier accept an event as a parameter?
- a single object to encapsulate subject, greeting, and message info for an email?
- sending mail slows down page load, need to do this asynchronously
*** TODO need logging for mailings
log to database? trim after 30 days?
need a way to generate reports
web portal?
is the 'sent' folder for the champa account good enough?
